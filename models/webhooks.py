from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
from datetime import datetime
class UserModel(BaseModel):
    login: str = Field(..., description="The username of the GitHub user.")
    id: int = Field(..., description="The unique identifier of the user.")

class Sender(UserModel):
    node_id: Optional[str] = Field(default=None, description="The node identifier of the user.")
    avatar_url: Optional[str] = Field(default=None, description="URL to the user's avatar image.")
    gravatar_id: Optional[str] = Field(default=None, description="The user's Gravatar ID.")
    url: Optional[str] = Field(default=None, description="The API URL for the user.")
    html_url: Optional[str] = Field(default=None, description="The HTML URL to the user's GitHub profile.")
    followers_url: Optional[str] = Field(default=None, description="URL to the user's followers list.")
    following_url: Optional[str] = Field(default=None, description="URL template for user's following list.")
    gists_url: Optional[str] = Field(default=None, description="URL template for user's gists.")
    starred_url: Optional[str] = Field(default=None, description="URL template for user's starred repositories.")
    subscriptions_url: Optional[str] = Field(default=None, description="URL to user's repository subscriptions.")
    organizations_url: Optional[str] = Field(default=None, description="URL to user's organizations.")
    repos_url: Optional[str] = Field(default=None, description="URL to user's repositories.")
    events_url: Optional[str] = Field(default=None, description="URL template for user's events.")
    received_events_url: Optional[str] = Field(default=None, description="URL to events received by the user.")
    type: Optional[str] = Field(default=None, description="The type of GitHub account.")
    user_view_type: Optional[str] = Field(default=None, description="The view type of the user account.")
    site_admin: Optional[bool] = Field(default=None, description="Whether the user is a GitHub site admin.")

class RepoModel(BaseModel):
    id: int = Field(..., description="The repository's unique identifier.")
    name: str = Field(..., description="The name of the repository.")
    full_name: str = Field(..., description="The full name of the repository including the owner's login.")

class PullRequestModel(BaseModel):
    id: int = Field(..., description="The unique identifier of the pull request.")
    number: int = Field(..., description="The pull request number within the repository.")
    state: str = Field(..., description="The current state of the pull request (e.g., open, closed).")
    title: str = Field(..., description="The title of the pull request.")
    body: Optional[str] = Field(default=None, description="The description or body of the pull request (optional).")
    user: UserModel = Field(..., description="The user who created the pull request.")
    
class Step(BaseModel):
    name: str = Field(..., description="The name of the step.")
    status: str = Field(..., description="The current status of the step (e.g., completed).")
    conclusion: Optional[str] = Field(None, description="The final conclusion of the step (e.g., success, failure).")
    number: int = Field(..., description="The sequence number of the step.")
    started_at: Optional[datetime] = Field(None, description="Timestamp when the step started.")
    completed_at: Optional[datetime] = Field(None, description="Timestamp when the step completed.")

class WorkflowJob(BaseModel):
    id: int = Field(..., description="The unique identifier for the workflow job.")
    run_id: int = Field(..., description="The identifier of the run that this job belongs to.")
    workflow_name: str = Field(..., description="The name of the workflow.")
    head_branch: str = Field(..., description="The branch from which the workflow was triggered.")
    run_url: str = Field(..., description="URL to access details about the run.")
    run_attempt: int = Field(..., description="The attempt number of the run.")
    node_id: str = Field(..., description="The node identifier for the workflow job.")
    head_sha: str = Field(..., description="The SHA of the head commit.")
    url: str = Field(..., description="The API URL for the workflow job.")
    html_url: str = Field(..., description="The HTML URL for the workflow job on GitHub.")
    status: str = Field(..., description="The current status of the workflow job (e.g., completed, queued).")
    conclusion: Optional[str] = Field(None, description="The final conclusion of the workflow job (e.g., success, failure).")
    created_at: datetime = Field(..., description="Timestamp for when the job was created.")
    started_at: Optional[datetime] = Field(None, description="Timestamp for when the job started.")
    completed_at: Optional[datetime] = Field(None, description="Timestamp for when the job completed.")
    name: str = Field(..., description="The name of the workflow job.")
    steps: List[Step] = Field(..., description="List of steps executed in this job.")
    check_run_url: str = Field(..., description="The URL to the check run associated with this job.")
    labels: List[str] = Field(..., description="Labels assigned to the workflow job.")
    runner_id: Optional[int] = Field(None, description="The ID of the runner executing the job.")
    runner_name: Optional[str] = Field(None, description="The name of the runner executing the job.")
    runner_group_id: Optional[int] = Field(None, description="The group ID of the runner.")
    runner_group_name: Optional[str] = Field(None, description="The group name of the runner.")
class Installation(BaseModel):
    id: int = Field(..., description="ID")
    node_id: Optional[str] = Field(None, description="Node ID for the installation")
    client_id: Optional[str] = Field(default=None, description="Client ID associated with the installation")
    account: Optional[dict] = Field(default=None, description="Account information for the installation")
    repository_selection: Optional[str] = Field(default=None, description="Repository selection status")
    access_tokens_url: Optional[str] = Field(default=None, description="URL to access tokens for the installation")
    repositories_url: Optional[str] = Field(default=None, description="URL to access installation repositories")
    html_url: Optional[str] = Field(default=None, description="HTML URL for the installation")
    app_id: Optional[int] = Field(default=None, description="GitHub App ID associated with the installation")
    app_slug: Optional[str] = Field(default=None, description="GitHub App slug")
    target_id: Optional[int] = Field(default=None, description="Target ID for the installation")
    target_type: Optional[str] = Field(default=None, description="Type of the target (e.g., User or Organization)")
    permissions: Optional[dict] = Field(default=None, description="Permissions granted to the installation")
    events: Optional[List[str]] = Field(default=None, description="Events associated with the installation")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the installation was created")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the installation was last updated")
    single_file_name: Optional[str] = Field(default=None, description="Name of the single file, if applicable")
    has_multiple_single_files: Optional[bool] = Field(default=None, description="Indicates if there are multiple single files")
    single_file_paths: Optional[List[str]] = Field(default=None, description="List of single file paths")
    suspended_by: Optional[str] = Field(default=None, description="Identifier for who suspended the installation")
    suspended_at: Optional[datetime] = Field(default=None, description="Timestamp when the installation was suspended")

class WorkflowRun(BaseModel):
    id: int = Field(..., description="ID of the Workflow Run")
    name: str = Field(..., description="The name of the workflow run")
    node_id: str = Field(..., description="The node identifier for the workflow run")
    head_branch: str = Field(..., description="The branch from which the workflow was triggered")
    head_sha: str = Field(..., description="The SHA of the head commit in the workflow run")
    path: str = Field(..., description="The path of the workflow file")
    display_title: str = Field(..., description="The display title of the workflow run")
    run_number: int = Field(..., description="The run number of the workflow run")
    event: str = Field(..., description="The event that triggered the workflow run")
    status: str = Field(..., description="The current status of the workflow run")
    conclusion: Optional[str] = Field(None, description="The final conclusion of the workflow run")
    workflow_id: int = Field(..., description="The workflow ID associated with the run")
    check_suite_id: int = Field(..., description="The check suite ID associated with the run")
    check_suite_node_id: str = Field(..., description="The check suite node identifier")
    url: str = Field(..., description="API URL for the workflow run")
    html_url: str = Field(..., description="HTML URL for the workflow run on GitHub")
    pull_requests: List[dict] = Field(..., description="List of pull requests associated with the workflow run")
    created_at: datetime = Field(..., description="Timestamp when the workflow run was created")
    updated_at: datetime = Field(..., description="Timestamp when the workflow run was last updated")
    actor: dict = Field(..., description="The user who initiated the workflow run")
    run_attempt: int = Field(..., description="The attempt number of the workflow run")
    referenced_workflows: List[Any] = Field(..., description="List of referenced workflows")
    run_started_at: datetime = Field(..., description="Timestamp when the workflow run started")
    triggering_actor: dict = Field(..., description="The user who triggered the workflow run")
    jobs_url: str = Field(..., description="URL to access the jobs of the workflow run")
    logs_url: str = Field(..., description="URL to access the logs of the workflow run")
    check_suite_url: str = Field(..., description="URL of the associated check suite")
    artifacts_url: str = Field(..., description="URL to access the artifacts of the workflow run")
    cancel_url: str = Field(..., description="URL to cancel the workflow run")
    rerun_url: str = Field(..., description="URL to re-run the workflow run")
    previous_attempt_url: str = Field(..., description="URL to the previous attempt of the workflow run")
    workflow_url: str = Field(..., description="URL to the workflow definition")
    head_commit: dict = Field(..., description="The head commit of the workflow run")
    repository: dict = Field(..., description="The repository where the workflow run took place")

class PullRequestWebhook(BaseModel):
    action: str = Field(..., description="The action that triggered the webhook event (e.g., opened, closed).")
    pull_request: Optional[PullRequestModel] = Field(default=None, description="The pull request data associated with the webhook event.")
    repository: Optional[RepoModel] = Field(default=None, description="The repository related to the pull request event.")
    sender: Optional[Sender] = Field(default=None, description="The user who initiated the webhook event.")
    workflow_job: Optional[WorkflowJob] = Field(default=None, description="the Workflow Job data that is running/completed.")
    workflow_run: Optional[WorkflowRun] = Field(default=None, description="Workflow.")
    installation: Optional[Installation] = Field(default=None, description="Installation event (this is a default event, don't need to subscribe manually)")
