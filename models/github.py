from typing import Optional
from pydantic import BaseModel, Field


class GitHubUserResponseSucess(BaseModel):
    login: str = Field(..., description="GitHub username")
    id: int = Field(..., description="GitHub user ID")
    node_id: str = Field(..., description="Node ID")
    avatar_url: str = Field(..., description="URL of user's avatar")
    gravatar_id: str = Field(..., description="Gravatar ID")
    url: str = Field(..., description="API URL for user")
    html_url: str = Field(..., description="GitHub profile URL")
    followers_url: str = Field(..., description="API URL for followers")
    following_url: str = Field(..., description="API URL for following")
    gists_url: str = Field(..., description="API URL for gists")
    starred_url: str = Field(..., description="API URL for starred repos")
    subscriptions_url: str = Field(..., description="API URL for subscriptions")
    organizations_url: str = Field(..., description="API URL for organizations")
    repos_url: str = Field(..., description="API URL for repositories")
    events_url: str = Field(..., description="API URL for events")
    received_events_url: str = Field(..., description="API URL for received events")
    type: str = Field(..., description="Type of account")
    user_view_type: str = Field(..., description="User view type")
    site_admin: bool = Field(..., description="Whether user is a site admin")
    name: Optional[str] = Field(None, description="User's full name")
    company: Optional[str] = Field(None, description="User's company")
    blog: str = Field(..., description="User's blog URL")
    location: Optional[str] = Field(None, description="User's location")
    email: Optional[str] = Field(None, description="User's email")
    hireable: Optional[bool] = Field(None, description="Whether user is hireable")
    bio: Optional[str] = Field(None, description="User's bio")
    twitter_username: Optional[str] = Field(None, description="User's Twitter username")
    notification_email: Optional[str] = Field(None, description="User's notification email")
    public_repos: int = Field(..., description="Number of public repositories")
    public_gists: int = Field(..., description="Number of public gists")
    followers: int = Field(..., description="Number of followers")
    following: int = Field(..., description="Number of users following")
    created_at: str = Field(..., description="Account creation timestamp")
    updated_at: str = Field(..., description="Account last update timestamp")

class GitHubUserResponseError(BaseModel):
    message: str = Field(..., description="Error message from GitHub API", example="Bad credentials")
    documentation_url: str = Field(..., description="URL to GitHub API documentation", example="https://docs.github.com/rest")
    status: str = Field(..., description="HTTP status code", example="401")

class GithubActionJWTDecoded(BaseModel):
    actor: str = Field(..., description="GitHub username of the actor")
    actor_id: str = Field(..., description="GitHub user ID of the actor") 
    aud: str = Field(..., description="Audience for the token")
    base_ref: Optional[str] = Field(None, description="Base reference branch")
    event_name: Optional[str] = Field(None, description="GitHub event that triggered the action")
    exp: int = Field(..., description="Token expiration timestamp")
    head_ref: Optional[str] = Field(None, description="Head reference branch")
    iat: int = Field(..., description="Token issued at timestamp")
    iss: str = Field(..., description="Token issuer")
    job_workflow_ref: Optional[str] = Field(None, description="Reference to the workflow job")
    job_workflow_sha: Optional[str] = Field(None, description="SHA of the workflow job")
    jti: Optional[str] = Field(None, description="JWT ID")
    nbf: Optional[int] = Field(None, description="Not before timestamp")
    ref: Optional[str] = Field(None, description="Git reference")
    ref_protected: Optional[str] = Field(None, description="Whether the reference is protected")
    ref_type: Optional[str] = Field(None, description="Type of reference")
    repository: Optional[str] = Field(None, description="Repository name")
    repository_id: Optional[str] = Field(None, description="Repository ID")
    repository_owner: Optional[str] = Field(None, description="Repository owner")
    repository_owner_id: Optional[str] = Field(None, description="Repository owner ID")
    repository_visibility: Optional[str] = Field(None, description="Repository visibility")
    run_attempt: Optional[str] = Field(None, description="Workflow run attempt number")
    run_id: Optional[str] = Field(None, description="Workflow run ID")
    run_number: Optional[str] = Field(None, description="Workflow run number")
    runner_environment: Optional[str] = Field(None, description="GitHub runner environment")
    sha: Optional[str] = Field(None, description="Commit SHA")
    sub: Optional[str] = Field(None, description="Subject of the token")
    workflow: Optional[str] = Field(None, description="Workflow name")
    workflow_ref: Optional[str] = Field(None, description="Workflow reference")
    workflow_sha: Optional[str] = Field(None, description="Workflow SHA")
